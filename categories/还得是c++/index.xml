<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>还得是C&#43;&#43; on AhaKnow</title>
    <link>https://ahaknow.com/categories/%E8%BF%98%E5%BE%97%E6%98%AFc&#43;&#43;/</link>
    <description>Recent content in 还得是C&#43;&#43; on AhaKnow</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 11 Sep 2024 23:50:24 +0800</lastBuildDate>
    <atom:link href="https://ahaknow.com/categories/%E8%BF%98%E5%BE%97%E6%98%AFc++/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>开发实战：“锁”的机制</title>
      <link>https://ahaknow.com/posts/know/dev-mutex/</link>
      <pubDate>Wed, 29 May 2024 11:05:35 +0800</pubDate>
      <guid>https://ahaknow.com/posts/know/dev-mutex/</guid>
      <description></description>
    </item>
    <item>
      <title>开发实战：CMake实现可执行文件的安装与打包分发</title>
      <link>https://ahaknow.com/posts/know/dev-cpack-release/</link>
      <pubDate>Mon, 20 May 2024 17:54:35 +0800</pubDate>
      <guid>https://ahaknow.com/posts/know/dev-cpack-release/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;就是代码写好了，肯定不能发源码出去，肯定发的是可执行文件，或者就依赖和可执行文件都打包好～&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果是Github管理的话，甚至还要考虑一下Release管理。&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>开发实战：为什么要将函数实现与头文件分离</title>
      <link>https://ahaknow.com/posts/know/dev-header-source/</link>
      <pubDate>Sun, 28 Apr 2024 14:02:22 +0800</pubDate>
      <guid>https://ahaknow.com/posts/know/dev-header-source/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;在写C++工程的时候，习惯性的是将头文件与其实现分开编写的。&lt;/p&gt;
&lt;p&gt;今天被问到了这个问题：&lt;/p&gt;
&lt;p&gt;“在写C++代码的时候，将函数实现直接写在头文件里，会怎么样，有什么不好的地方？为什么要将函数的实现单独写在源文件”&lt;/p&gt;</description>
    </item>
    <item>
      <title>开发实战：解析H.264编码和LZ4压缩的相机图像</title>
      <link>https://ahaknow.com/posts/know/dev-decode-h.264-lz4-image-frames/</link>
      <pubDate>Thu, 18 Apr 2024 14:43:01 +0800</pubDate>
      <guid>https://ahaknow.com/posts/know/dev-decode-h.264-lz4-image-frames/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;在&lt;a href=&#34;../dev-parse-binary-file&#34;&gt;上一篇&lt;/a&gt;打通了读取字节流文件后，能够得到每一帧的字节数据了，这一篇就来解决为这些数据赋予实际意义。&lt;/p&gt;
&lt;p&gt;彩色图像采用H.264编码 -&amp;gt; 那就需要按照H.264解码&lt;/p&gt;
&lt;p&gt;视差图像采用LZ4压缩 -&amp;gt; 视差图保存的16位无符号整数，采用LZ4解压缩（开源）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;背景知识&#34;&gt;背景知识&lt;/h2&gt;
&lt;h3 id=&#34;lz4&#34;&gt;LZ4&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://lz4.org/&#34;&gt;&lt;strong&gt;LZ4&lt;/strong&gt;&lt;/a&gt; 是一个非常快速的压缩算法，提供了实时压缩速度和非常快的解压缩速度，由 Yann Collet（FaceBook大佬） 开发。它属于无损压缩算法，意味着压缩后的数据可以完全恢复到其原始形态。LZ4 主要设计用于非常高速的场景（解压速度可以达到数GB每秒），例如实时数据传输、日志数据处理等。&lt;/p&gt;</description>
    </item>
    <item>
      <title>开发实战：解析二进制文件</title>
      <link>https://ahaknow.com/posts/know/dev-parse-binary-file/</link>
      <pubDate>Wed, 17 Apr 2024 16:34:35 +0800</pubDate>
      <guid>https://ahaknow.com/posts/know/dev-parse-binary-file/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;需要解析相机的字节流文件（就是一个一个Byte组成的文件，不解析的话没有啥实际意义）。&lt;/p&gt;
&lt;p&gt;解析需要按照一定的规则，比如：如何确定数据的头（Header），以及一个数据帧（一个数据包）的结构是什么样的，&lt;strong&gt;这个有点像网络包的定义，在头部定义了很多信息，这些信息能够让这个数据包按照规则解析出来后有具体的意义&lt;/strong&gt;。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
